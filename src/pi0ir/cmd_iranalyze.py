import json
import os
import queue
import threading

from .iranalyze import IrAnalyze
from .irrecv import IrRecv
from .utils.mylogger import get_logger


class CmdIrAnalyze:
    """
    IrAnalyzeクラスを使った実例
    """

    PULSE_SPACE_FILE = "/tmp/pulse_space.txt"
    JSON_DUMP_FILE = "/tmp/ir_dump.irconf"

    MSG_END = ""

    def __init__(self, pin, n=0, verbose=False, debug=False):
        self._dbg = debug
        self._log = get_logger(__class__.__name__, debug)
        self._log.debug("pin=%d, n=%d, verbose=%s", pin, n, verbose)

        self.pin = pin
        self.n = n
        self.verbose = verbose

        self.analyzer = IrAnalyze(debug=self._dbg)
        self.receiver = IrRecv(
            self.pin, verbose=self.verbose, debug=self._dbg
        )

        self.msgq = queue.Queue()
        self.th_worker = threading.Thread(target=self.worker)
        self.th_worker.start()

        self.serial_num = 0

    def worker(self):
        """
        サブスレッド

        メッセージキューから``raw_data``を取出し、
        信号解析する。

        raw_data: [[pulse1, space1], [pulse2, space2], ..]
        """
        self._log.debug("")

        while True:
            raw_data = self.msgq.get()
            self._log.debug("raw_data=%s", raw_data)
            if raw_data == self.MSG_END:
                break

            with open(self.PULSE_SPACE_FILE, "w") as f:
                f.write("# generated by %s\n" % os.path.basename(__file__))
                for [p, s] in raw_data:
                    f.write("pulse %d\n" % p)
                    f.write("space %d\n" % s)

            result = self.analyzer.analyze(raw_data)
            self._log.debug("result=%s", result)
            if result is None:
                print("invalid signal .. ignored")
            else:
                self.serial_num += 1
                dev_name1 = "dev_" + str(self.serial_num)
                dev_name2 = "dev_" + ("%06d" % self.serial_num)
                result["dev_name"] = [dev_name1, dev_name2]
                json_str = json.dumps(result["buttons"]["button1"])
                if self.n > 1:
                    print("[%d/%d]," % (self.serial_num, self.n), end="")
                print(
                    "%s,%s,T=%d,%s"
                    % (
                        dev_name1,
                        result["format"],
                        round(result["T"]),
                        json_str,
                    )
                )

                if self.serial_num == 1:
                    dump_data = [result]
                else:
                    with open(self.JSON_DUMP_FILE, "r") as f:
                        dump_data = json.load(f)
                    dump_data.append(result)

                json_str = self.analyzer.json_dumps(dump_data)
                self._log.debug("json_str=%s", json_str)

                with open(self.JSON_DUMP_FILE, "w") as f:
                    f.write(json_str)

                if len(result["sym_tbl"]["?"]) > 0:
                    print("'?': %s .. try again" % result["sym_tbl"]["?"])
                    continue
                if len(result["sym_tbl"]["="]) > 0:
                    print("'=' in '%s' .. try again" % result["sym_tbl"]["="])
                    continue

                if self.n > 0 and self.serial_num == self.n:
                    self._log.debug("serial_num=%d", self.serial_num)
                    break

        self._log.debug("done")

    def main(self):
        """
        メインスレッド

        赤外線信号を受信し、
        メッセージをキューに格納すると、
        ただちに次の信号を受信する。

        実際の解析は <worker>スレッドに任せる。
        """
        self._log.debug("")

        count = 0
        while True:
            raw_data = self.receiver.recv()
            self._log.debug("raw_data=%s", raw_data)
            self.msgq.put(raw_data)

            count += 1
            if self.n > 0 and count == self.n:
                self._log.debug("count=%d/%d", count, self.n)
                break

    def end(self):
        self._log.debug("")

        if self.th_worker.is_alive():
            self.msgq.put(self.MSG_END)
            self._log.debug("join()")
            self.th_worker.join()

        self.receiver.end()
        self._log.debug("done")
